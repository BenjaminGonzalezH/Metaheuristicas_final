gcd$Meses <- log(gcd$Meses)
gcd$Monto <- log(gcd$Monto)
gcd$Edad <- log(gcd$Edad)
# Calcular los percentiles
valor_percentil_inferior_Meses <- quantile(gcd$Meses,
probs = 1 / 100)
valor_percentil_superior_Meses <- quantile(gcd$Meses,
probs = 99 / 100)
valor_percentil_inferior_Monto <- quantile(gcd$Monto,
probs = 0.1 / 100)
valor_percentil_superior_Monto <- quantile(gcd$Monto,
probs = 100 / 100)
# Identificar los valores atípicos
valores_atipicos_Meses <- gcd$Meses[gcd$Meses < valor_percentil_inferior_Meses | gcd$Meses > valor_percentil_superior_Meses]
print(valores_atipicos_Meses)
valores_atipicos_Monto <- gcd$Monto[gcd$Monto < valor_percentil_inferior_Monto | gcd$Monto > valor_percentil_superior_Monto]
print(valores_atipicos_Monto)
# Eliminar los valores atípicos
gcd <- gcd[!gcd$Meses %in% valores_atipicos_Meses, ]
gcd <- gcd[!gcd$Monto %in% valores_atipicos_Monto, ]
# Fin de datos atipicos
boxplot(gcd$Meses, main = "Gráfico de Caja Meses", ylab = "Meses")
boxplot(gcd$Monto, main = "Gráfico de Caja Monto", ylab = "Monto")
################# Codificación de variables ##########
## Estado de cuenta.
variables_dummy <- model.matrix(~ gcd$Estado_de_cuenta - 1, data = gcd)
gcd <- cbind(gcd, variables_dummy)
## Ahorros.
variables_dummy <- model.matrix(~ gcd$Ahorros - 1, data = gcd)
gcd <- cbind(gcd, variables_dummy)
## Estado de cuenta.
variables_dummy <- model.matrix(~ gcd$Empleo - 1, data = gcd)
gcd <- cbind(gcd, variables_dummy)
## Historial Crediticio.
variables_dummy <- model.matrix(~ gcd$Historial_Crediticio - 1, data = gcd)
gcd <- cbind(gcd, variables_dummy)
## Proposito
variables_dummy <- model.matrix(~ gcd$Proposito - 1, data = gcd)
gcd <- cbind(gcd, variables_dummy)
## Propiedad
variables_dummy <- model.matrix(~ gcd$Propiedad - 1, data = gcd)
gcd <- cbind(gcd, variables_dummy)
## Otras deudas
variables_dummy <- model.matrix(~ gcd$Otras_Deudas - 1, data = gcd)
gcd <- cbind(gcd, variables_dummy)
## Alojamiento
variables_dummy <- model.matrix(~ gcd$Alojamiento - 1, data = gcd)
gcd <- cbind(gcd, variables_dummy)
gcd <- gcd[, -which(names(gcd) == "Estado_de_cuenta")]
gcd <- gcd[, -which(names(gcd) == "Ahorros")]
gcd <- gcd[, -which(names(gcd) == "Empleo")]
gcd <- gcd[, -which(names(gcd) == "Historial_Crediticio")]
gcd <- gcd[, -which(names(gcd) == "Proposito")]
gcd <- gcd[, -which(names(gcd) == "Propiedad")]
gcd <- gcd[, -which(names(gcd) == "Otras_Deudas")]
gcd <- gcd[, -which(names(gcd) == "Alojamiento")]
View(gcd)
########################### URL de la base de datos. ##########################
url <- "https://archive.ics.uci.edu/ml/machine-learning-databases/statlog/german/german.data"
# Nombres de las columnas.
column_names <- c("Estado_de_cuenta", "Meses", "Historial_Crediticio",
"Proposito", "Monto", "Ahorros", "Empleo", "Interes",
"Estado_Personal", "Aval", "Residencia", "Propiedad",
"Edad", "Otras_Deudas", "Alojamiento", "Tarjetas_de_credito",
"Trabajo", "Dependientes", "Telefono", "Extranjero",
"Clase")
################## Importar la base de datos sin modificaciones. ###########
gcd <- read.table(url, header = FALSE, sep = " ",
col.names = column_names,
na.strings = "?",
stringsAsFactors = TRUE)
################## Eliminación de columnas ###########
## Tomar de referencia código anterior, además de los argumentos
## escritos en el informe anterior.
gcd <- gcd[, -which(names(gcd) == "Telefono")]
gcd <- gcd[, -which(names(gcd) == "Extranjero")]
gcd <- gcd[, -which(names(gcd) == "Interes")]
gcd <- gcd[, -which(names(gcd) == "Residencia")]
gcd <- gcd[, -which(names(gcd) == "Tarjetas_de_credito")]
gcd <- gcd[, -which(names(gcd) == "Dependientes")]
gcd <- gcd[, -which(names(gcd) == "Aval")]
gcd <- gcd[, -which(names(gcd) == "Estado_Personal")]
gcd <- gcd[, -which(names(gcd) == "Trabajo")]
################## Datos atipicos ###########
# Transformación logaritmica.
gcd$Meses <- log(gcd$Meses)
gcd$Monto <- log(gcd$Monto)
gcd$Edad <- log(gcd$Edad)
# Calcular los percentiles
valor_percentil_inferior_Meses <- quantile(gcd$Meses,
probs = 1 / 100)
valor_percentil_superior_Meses <- quantile(gcd$Meses,
probs = 99 / 100)
valor_percentil_inferior_Monto <- quantile(gcd$Monto,
probs = 0.1 / 100)
valor_percentil_superior_Monto <- quantile(gcd$Monto,
probs = 100 / 100)
# Identificar los valores atípicos
valores_atipicos_Meses <- gcd$Meses[gcd$Meses < valor_percentil_inferior_Meses | gcd$Meses > valor_percentil_superior_Meses]
print(valores_atipicos_Meses)
valores_atipicos_Monto <- gcd$Monto[gcd$Monto < valor_percentil_inferior_Monto | gcd$Monto > valor_percentil_superior_Monto]
print(valores_atipicos_Monto)
# Eliminar los valores atípicos
gcd <- gcd[!gcd$Meses %in% valores_atipicos_Meses, ]
gcd <- gcd[!gcd$Monto %in% valores_atipicos_Monto, ]
# Fin de datos atipicos
boxplot(gcd$Meses, main = "Gráfico de Caja Meses", ylab = "Meses")
boxplot(gcd$Monto, main = "Gráfico de Caja Monto", ylab = "Monto")
################# Binarización ##########
# Discretización de 'Meses'
gcd$Meses_discretizado <- cut(gcd$Meses,
breaks = quantile(gcd$Meses, probs = seq(0, 1, by = 0.25)),
include.lowest = TRUE,
labels = c("Muy_Bajo", "Bajo", "Medio", "Alto"))
# Discretización de 'Monto'
gcd$Monto_discretizado <- cut(gcd$Monto,
breaks = quantile(gcd$Monto, probs = seq(0, 1, by = 0.25)),
include.lowest = TRUE,
labels = c("Muy_Bajo", "Bajo", "Medio", "Alto"))
# Discretización de 'Edad'
gcd$Edad_discretizado <- cut(gcd$Edad,
breaks = quantile(gcd$Edad, probs = seq(0, 1, by = 0.25)),
include.lowest = TRUE,
labels = c("Muy_Bajo", "Bajo", "Medio", "Alto"))
# Aplicar one-hot encoding a las variables discretizadas
variables_dummy <- model.matrix(~ Meses_discretizado - 1, data = gcd)
gcd <- cbind(gcd, variables_dummy)
variables_dummy <- model.matrix(~ Monto_discretizado - 1, data = gcd)
gcd <- cbind(gcd, variables_dummy)
variables_dummy <- model.matrix(~ Edad_discretizado - 1, data = gcd)
gcd <- cbind(gcd, variables_dummy)
# Eliminar las columnas originales
gcd <- gcd[, -which(names(gcd) == "Meses")]
gcd <- gcd[, -which(names(gcd) == "Monto")]
gcd <- gcd[, -which(names(gcd) == "Edad")]
################# Codificación de variables ##########
## Estado de cuenta.
variables_dummy <- model.matrix(~ gcd$Estado_de_cuenta - 1, data = gcd)
gcd <- cbind(gcd, variables_dummy)
## Ahorros.
variables_dummy <- model.matrix(~ gcd$Ahorros - 1, data = gcd)
gcd <- cbind(gcd, variables_dummy)
## Estado de cuenta.
variables_dummy <- model.matrix(~ gcd$Empleo - 1, data = gcd)
gcd <- cbind(gcd, variables_dummy)
## Historial Crediticio.
variables_dummy <- model.matrix(~ gcd$Historial_Crediticio - 1, data = gcd)
gcd <- cbind(gcd, variables_dummy)
## Proposito
variables_dummy <- model.matrix(~ gcd$Proposito - 1, data = gcd)
gcd <- cbind(gcd, variables_dummy)
## Propiedad
variables_dummy <- model.matrix(~ gcd$Propiedad - 1, data = gcd)
gcd <- cbind(gcd, variables_dummy)
## Otras deudas
variables_dummy <- model.matrix(~ gcd$Otras_Deudas - 1, data = gcd)
gcd <- cbind(gcd, variables_dummy)
## Alojamiento
variables_dummy <- model.matrix(~ gcd$Alojamiento - 1, data = gcd)
gcd <- cbind(gcd, variables_dummy)
gcd <- gcd[, -which(names(gcd) == "Estado_de_cuenta")]
gcd <- gcd[, -which(names(gcd) == "Ahorros")]
gcd <- gcd[, -which(names(gcd) == "Empleo")]
gcd <- gcd[, -which(names(gcd) == "Historial_Crediticio")]
gcd <- gcd[, -which(names(gcd) == "Proposito")]
gcd <- gcd[, -which(names(gcd) == "Propiedad")]
gcd <- gcd[, -which(names(gcd) == "Otras_Deudas")]
gcd <- gcd[, -which(names(gcd) == "Alojamiento")]
View(gcd)
gcd_pagadores <- subset(gcd, Clase == 1)
gcd_deudores <- subset(gcd, Clase == 2)
gcd <- gcd[, -which(names(gcd) == "Clase")]
gcd_deudores <- gcd_deudores[, -which(names(gcd_deudores) == "Clase")]
gcd_pagadores <- gcd_pagadores[, -which(names(gcd_pagadores) == "Clase")]
View(gcd_deudores)
View(gcd)
gcd <- gcd[, -which(names(gcd) == "Meses_discretizado")]
gcd <- gcd[, -which(names(gcd) == "Monto_discretizado")]
gcd <- gcd[, -which(names(gcd) == "Edad_discretizado")]
########################### URL de la base de datos. ##########################
url <- "https://archive.ics.uci.edu/ml/machine-learning-databases/statlog/german/german.data"
# Nombres de las columnas.
column_names <- c("Estado_de_cuenta", "Meses", "Historial_Crediticio",
"Proposito", "Monto", "Ahorros", "Empleo", "Interes",
"Estado_Personal", "Aval", "Residencia", "Propiedad",
"Edad", "Otras_Deudas", "Alojamiento", "Tarjetas_de_credito",
"Trabajo", "Dependientes", "Telefono", "Extranjero",
"Clase")
################## Importar la base de datos sin modificaciones. ###########
gcd <- read.table(url, header = FALSE, sep = " ",
col.names = column_names,
na.strings = "?",
stringsAsFactors = TRUE)
################## Eliminación de columnas ###########
## Tomar de referencia código anterior, además de los argumentos
## escritos en el informe anterior.
gcd <- gcd[, -which(names(gcd) == "Telefono")]
gcd <- gcd[, -which(names(gcd) == "Extranjero")]
gcd <- gcd[, -which(names(gcd) == "Interes")]
gcd <- gcd[, -which(names(gcd) == "Residencia")]
gcd <- gcd[, -which(names(gcd) == "Tarjetas_de_credito")]
gcd <- gcd[, -which(names(gcd) == "Dependientes")]
gcd <- gcd[, -which(names(gcd) == "Aval")]
gcd <- gcd[, -which(names(gcd) == "Estado_Personal")]
gcd <- gcd[, -which(names(gcd) == "Trabajo")]
################## Datos atipicos ###########
# Transformación logaritmica.
gcd$Meses <- log(gcd$Meses)
gcd$Monto <- log(gcd$Monto)
gcd$Edad <- log(gcd$Edad)
# Calcular los percentiles
valor_percentil_inferior_Meses <- quantile(gcd$Meses,
probs = 1 / 100)
valor_percentil_superior_Meses <- quantile(gcd$Meses,
probs = 99 / 100)
valor_percentil_inferior_Monto <- quantile(gcd$Monto,
probs = 0.1 / 100)
valor_percentil_superior_Monto <- quantile(gcd$Monto,
probs = 100 / 100)
# Identificar los valores atípicos
valores_atipicos_Meses <- gcd$Meses[gcd$Meses < valor_percentil_inferior_Meses | gcd$Meses > valor_percentil_superior_Meses]
print(valores_atipicos_Meses)
valores_atipicos_Monto <- gcd$Monto[gcd$Monto < valor_percentil_inferior_Monto | gcd$Monto > valor_percentil_superior_Monto]
print(valores_atipicos_Monto)
# Eliminar los valores atípicos
gcd <- gcd[!gcd$Meses %in% valores_atipicos_Meses, ]
gcd <- gcd[!gcd$Monto %in% valores_atipicos_Monto, ]
# Fin de datos atipicos
boxplot(gcd$Meses, main = "Gráfico de Caja Meses", ylab = "Meses")
boxplot(gcd$Monto, main = "Gráfico de Caja Monto", ylab = "Monto")
################# Binarización ##########
# Discretización de 'Meses'
gcd$Meses_discretizado <- cut(gcd$Meses,
breaks = quantile(gcd$Meses, probs = seq(0, 1, by = 0.25)),
include.lowest = TRUE,
labels = c("Muy_Bajo", "Bajo", "Medio", "Alto"))
# Discretización de 'Monto'
gcd$Monto_discretizado <- cut(gcd$Monto,
breaks = quantile(gcd$Monto, probs = seq(0, 1, by = 0.25)),
include.lowest = TRUE,
labels = c("Muy_Bajo", "Bajo", "Medio", "Alto"))
# Discretización de 'Edad'
gcd$Edad_discretizado <- cut(gcd$Edad,
breaks = quantile(gcd$Edad, probs = seq(0, 1, by = 0.25)),
include.lowest = TRUE,
labels = c("Muy_Bajo", "Bajo", "Medio", "Alto"))
# Aplicar one-hot encoding a las variables discretizadas
variables_dummy <- model.matrix(~ Meses_discretizado - 1, data = gcd)
gcd <- cbind(gcd, variables_dummy)
variables_dummy <- model.matrix(~ Monto_discretizado - 1, data = gcd)
gcd <- cbind(gcd, variables_dummy)
variables_dummy <- model.matrix(~ Edad_discretizado - 1, data = gcd)
gcd <- cbind(gcd, variables_dummy)
# Eliminar las columnas originales
gcd <- gcd[, -which(names(gcd) == "Meses")]
gcd <- gcd[, -which(names(gcd) == "Monto")]
gcd <- gcd[, -which(names(gcd) == "Edad")]
gcd <- gcd[, -which(names(gcd) == "Meses_discretizado")]
gcd <- gcd[, -which(names(gcd) == "Monto_discretizado")]
gcd <- gcd[, -which(names(gcd) == "Edad_discretizado")]
################# Codificación de variables ##########
## Estado de cuenta.
variables_dummy <- model.matrix(~ gcd$Estado_de_cuenta - 1, data = gcd)
gcd <- cbind(gcd, variables_dummy)
## Ahorros.
variables_dummy <- model.matrix(~ gcd$Ahorros - 1, data = gcd)
gcd <- cbind(gcd, variables_dummy)
## Estado de cuenta.
variables_dummy <- model.matrix(~ gcd$Empleo - 1, data = gcd)
gcd <- cbind(gcd, variables_dummy)
## Historial Crediticio.
variables_dummy <- model.matrix(~ gcd$Historial_Crediticio - 1, data = gcd)
gcd <- cbind(gcd, variables_dummy)
## Proposito
variables_dummy <- model.matrix(~ gcd$Proposito - 1, data = gcd)
gcd <- cbind(gcd, variables_dummy)
## Propiedad
variables_dummy <- model.matrix(~ gcd$Propiedad - 1, data = gcd)
gcd <- cbind(gcd, variables_dummy)
## Otras deudas
variables_dummy <- model.matrix(~ gcd$Otras_Deudas - 1, data = gcd)
gcd <- cbind(gcd, variables_dummy)
## Alojamiento
variables_dummy <- model.matrix(~ gcd$Alojamiento - 1, data = gcd)
gcd <- cbind(gcd, variables_dummy)
gcd <- gcd[, -which(names(gcd) == "Estado_de_cuenta")]
gcd <- gcd[, -which(names(gcd) == "Ahorros")]
gcd <- gcd[, -which(names(gcd) == "Empleo")]
gcd <- gcd[, -which(names(gcd) == "Historial_Crediticio")]
gcd <- gcd[, -which(names(gcd) == "Proposito")]
gcd <- gcd[, -which(names(gcd) == "Propiedad")]
gcd <- gcd[, -which(names(gcd) == "Otras_Deudas")]
gcd <- gcd[, -which(names(gcd) == "Alojamiento")]
################## División en tres conjuntos ###########
## Se hace división en tres conjuntos de datos (general, pagadores,
## deudores) esto se hizo con el mero proposito de conseguir más reglas
## interesantes.
gcd_pagadores <- subset(gcd, Clase == 1)
gcd_deudores <- subset(gcd, Clase == 2)
gcd <- gcd[, -which(names(gcd) == "Clase")]
gcd_deudores <- gcd_deudores[, -which(names(gcd_deudores) == "Clase")]
gcd_pagadores <- gcd_pagadores[, -which(names(gcd_pagadores) == "Clase")]
################## Transformación a transacciones ###########
library(arules)
library(arulesViz)
library(RCurl)
library(dplyr)
transacciones_general <- as(gcd, "transactions")
transacciones_pagadores <- as(gcd_pagadores, "transactions")
transacciones_deudores <- as(gcd_deudores, "transactions")
View(transacciones_deudores)
warnings(transacciones_general <- as(gcd, "transactions"))
apriori(transacciones_general, parameter = list(supp = 0.01, conf = 0.8))
Rules_G <- apriori(transacciones_general, parameter = list(supp = 0.01, conf = 0.8))
Rules_P <- apriori(transacciones_pagadores, parameter = list(supp = 0.01, conf = 0.8))
Rules_D <- apriori(transacciones_deudores, parameter = list(supp = 0.01, conf = 0.8))
load("~/.RData")
load("~/dendrograma.pdf")
load("C:/Users/benja/OneDrive/Escritorio/Proyecto-pareto-20240821T151138Z-001/Proyecto-pareto/Proyecto-pareto/Ayudantía/R/.RData")
consensus_cluster_result
jaccard_extra
View(jaccard_extra)
cluster_comparison_results
complete_solutions
View(complete_solutions)
cluster_comparison_results
View(complete_solutions)
jaccard_extra
cluster_comparison_results
View(gene.df)
View(enrichGO_clusterxidSolution_genes)
View(enrichGO_clusterxidSolution_genes)
View(complete_solutions)
View(gene.df)
View(gene.df)
load("~/.RData")
install.packages("irace")
install.packages("optparse")
install.packages("tictoc")
install.packages("installr")
library(installr)
updateR()
install.packages("installr")
library(installr)
updateR()
library(optparse)
library(tictoc) # librería para medir el tiempo de ejecución
source("C:/Users/benja/OneDrive/Escritorio/Tunning/Script/Lab2_2024-irace.R")
source("C:/Users/benja/OneDrive/Escritorio/Tunning/Script/Lab2_2024-irace.R")
source("C:/Users/benja/OneDrive/Escritorio/Tunning/Script/Lab2_2024-irace.R")
library(optparse)
load("~/.RData")
load("C:/Users/benja/OneDrive/Escritorio/Proyecto-pareto-20240821T151138Z-001/Proyecto-pareto/Proyecto-pareto/Ayudantía/R/.RData")
View(input)
library(ggplot2)
library(dplyr)
setwd("C:/Users/Benjamin Gonzalez/Desktop/Workspace/Metaheuristica-TSP/Results/Experimentals")
setwd("C:/Users/benja/OneDrive/Escritorio/WorkSpace/Metaheuristica-TSP/Results/Experimentals")
df_C_TS <- read.csv("TS_converge_38.csv")
df_C_GLS <- read.csv("GLS_converge_38.csv")
df_TS_int38 <- read.csv("TS_results_38.txt")
df_TS_int76 <- read.csv("TS_results_76.txt")
df_TS_int194 <- read.csv("TS_results_194.txt")
df_GLS_int38 <- read.csv("GLS_results_38.txt")
df_GLS_int76 <- read.csv("GLS_results_76.txt")
df_GLS_int194 <- read.csv("GLS_results_194.txt")
convergence_data_TS <- data.frame(
Iteration = 1:length(df_C_TS$Mejor),  # Número de iteración
ObjectiveValue = df_C_TS$Mejor        # Valores de la función objetivo
)
convergence_data_GLS <- data.frame(
Iteration = 1:length(df_C_GLS$Mejor),  # Número de iteración
ObjectiveValue = df_C_GLS$Mejor        # Valores de la función objetivo
)
# Encontrar el valor mínimo registrado en el dataframe
min_value_TS <- min(df_C_TS$Mejor)
min_value_GLS <- min(df_C_GLS$Mejor)
# Crear el gráfico de convergencia
g_TS <- ggplot(convergence_data_TS, aes(x = Iteration, y = ObjectiveValue)) +
geom_line(color = "blue") +             # Línea que conecta los puntos
geom_point(color = "red") +             # Puntos en cada iteración
geom_hline(yintercept = min_value_TS,      # Línea horizontal con el valor mínimo
color = "green",             # Color de la línea
linetype = "dashed",        # Tipo de línea (puedes cambiarlo a "solid" si prefieres una línea continua)
size = 1) +                 # Grosor de la línea
labs(title = "Gráfico de Convergencia dj38 TS (80.000)",
x = "Iteración",
y = "GAP normalizado") +
theme_minimal()
g_GLS <- ggplot(convergence_data_GLS, aes(x = Iteration, y = ObjectiveValue)) +
geom_line(color = "blue") +             # Línea que conecta los puntos
geom_point(color = "red") +             # Puntos en cada iteración
geom_hline(yintercept = min_value_GLS,      # Línea horizontal con el valor mínimo
color = "green",             # Color de la línea
linetype = "dashed",        # Tipo de línea (puedes cambiarlo a "solid" si prefieres una línea continua)
size = 1) +                 # Grosor de la línea
labs(title = "Gráfico de Convergencia dj38 GLS (80.000)",
x = "Iteración",
y = "GAP normalizado") +
theme_minimal()
# Mostrar el gráfico
print(g_GLS)
print(g_TS)
df_38 <- bind_rows(
data.frame(Caso = "TS", Error = df_TS_int38$Error),
data.frame(Caso = "GLS", Error = df_GLS_int38$Error),
)
df_TS_int38 <- read.csv("TS_results_38.txt")
df_TS_int76 <- read.csv("TS_results_76.txt")
df_TS_int194 <- read.csv("TS_results_194.txt")
df_GLS_int38 <- read.csv("GLS_results_38.txt")
df_GLS_int76 <- read.csv("GLS_results_76.txt")
df_GLS_int194 <- read.csv("GLS_results_194.txt")
df_38 <- bind_rows(
data.frame(Caso = "TS", Error = df_TS_int38$Error),
data.frame(Caso = "GLS", Error = df_GLS_int38$Error),
)
df_76 <- bind_rows(
data.frame(Caso = "TS", Error = df_TS_int76$Error),
data.frame(Caso = "GLS", Error = df_GLS_int76$Error),
)
df_194 <- bind_rows(
data.frame(Caso = "TS", Error = df_TS_int194$Error),
data.frame(Caso = "GLS", Error = df_GLS_int194$Error),
)
g_r_38 <- ggplot(df_38, aes(x = Caso, y = Error, fill = Caso)) +
geom_boxplot(alpha = 0.7) +
labs(
title = "Boxplots de Error normalizado dj38 (80.000 llamadas)",
x = "Caso",
y = "Error"
) +
theme_minimal() +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1))
g_r_76 <- ggplot(df_76, aes(x = Caso, y = Error, fill = Caso)) +
geom_boxplot(alpha = 0.7) +
labs(
title = "Boxplots de Error normalizado pr76 (80.000 llamadas)",
x = "Caso",
y = "Error"
) +
theme_minimal() +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1))
g_r_194 <- ggplot(df_194, aes(x = Caso, y = Error, fill = Caso)) +
geom_boxplot(alpha = 0.7) +
labs(
title = "Boxplots de Error normalizado qa194 (80.000 llamadas)",
x = "Caso",
y = "Error"
) +
theme_minimal() +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1))
print(g_r_38)
print(g_r_76)
print(g_r_194)
df_TS_int38 <- read.csv("TS_results_38.txt")
df_GLS_int38 <- read.csv("GLS_results_38.txt")
g_r_38 <- ggplot(df_38, aes(x = Caso, y = Error, fill = Caso)) +
geom_boxplot(alpha = 0.7) +
labs(
title = "Boxplots de Error normalizado dj38 (80.000 llamadas)",
x = "Caso",
y = "Error"
) +
theme_minimal() +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1))
print(g_r_38)
View(g_r_38)
View(df_GLS_int38)
df_38 <- bind_rows(
data.frame(Caso = "TS", Error = df_TS_int38$Error),
data.frame(Caso = "GLS", Error = df_GLS_int38$Error),
)
g_r_38 <- ggplot(df_38, aes(x = Caso, y = Error, fill = Caso)) +
geom_boxplot(alpha = 0.7) +
labs(
title = "Boxplots de Error normalizado dj38 (80.000 llamadas)",
x = "Caso",
y = "Error"
) +
theme_minimal() +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1))
print(g_r_38)
source("C:/Users/benja/OneDrive/Escritorio/WorkSpace/Metaheuristica-TSP/Analisis.R")
resultado_shapiro <- shapiro.test(df_TS_int38$Error)
print(resultado_shapiro)
resultado_shapiro <- shapiro.test(df_TS_int76$Error)
print(resultado_shapiro)
resultado_shapiro <- shapiro.test(df_TS_int194$Error)
print(resultado_shapiro)
resultado_shapiro <- shapiro.test(df_GLS_int38$Error)
print(resultado_shapiro)
resultado_shapiro <- shapiro.test(df_GLS_int76$Error)
print(resultado_shapiro)
resultado_shapiro <- shapiro.test(df_GLS_int194$Error)
print(resultado_shapiro)
resultado <- t.test(df_TS_int38$Error, df_GLS_int38$Error, paired = TRUE)
print(resultado$p.value)
resultado <- t.test(df_TS_int76$Error, df_GLS_int76$Error, paired = TRUE)
print(resultado$p.value)
resultado <- t.test(df_TS_int194$Error, df_GLS_int194$Error, paired = TRUE)
print(resultado$p.value)
